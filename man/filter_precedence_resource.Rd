% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_precedence_resource.R
\name{filter_precedence_resource}
\alias{filter_precedence_resource}
\title{Filter: precedence relations with identical resources}
\usage{
filter_precedence_resource(
  eventlog,
  antecedents,
  consequents,
  precedence_type = c("directly_follows", "eventually_follows"),
  filter_method = c("all", "one_of", "none"),
  reverse = FALSE
)
}
\arguments{
\item{eventlog}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}; please use \code{log} instead.}

\item{antecedents, consequents}{The set of antecendent and consequent activities. Both are character vectors containing at least one activity identifier.
All pairs of antecedents and consequents are turned into seperate precedence rules.}

\item{precedence_type}{When \code{directly_follows}, the consequent activity should happen immediately after the antecedent activities.
When \code{eventually_follows}, other events are allowed to happen in between.}

\item{filter_method}{When \code{all}, only cases where all the relations are valid are preserved. When \code{one_of}, all the cases where
at least one of the conditions hold are preserved. When \code{none}, none of the relations are allowed.}

\item{reverse}{\code{\link{logical}} (default \code{FALSE}): Indicating whether the selection should be reversed.}
}
\value{
When given an object of type \code{\link[bupaR]{log}}, it will return a filtered \code{\link[bupaR]{log}}.
When given an object of type \code{\link[bupaR]{grouped_log}}, the filter will be applied in a stratified way (i.e. each separately for each group).
The returned log will be grouped on the same variables as the original log.
}
\description{
Filters cases based on the precedence relations between two sets of activities, where both antecendent and consequent have to be executed by the same resource.
}
\details{
In order to extract a subset of an event log which conforms with a set of precedence rules, one can use the filter_precedence method. There are two types of
precendence relations which can be tested: activities that should directly follow each other,
or activities that should eventually follow each other. The type can be set with the precedence type argument.
Further, the filter requires a vector of one or more antecedents (containing activity labels), and one or more consequents. Finally, also a filter method argument
can be set. This argument is relevant when there is more than one antecedent or consequent.
In such a case, you can specify that all possible precedence combinations must be present (all), at least one of them (one of), or none (none).
In case an activity instance exists of more than one events with different resource identifiers, only the first will be considered.
}
\references{
Swennen, M. (2018). Using Event Log Knowledge to Support Operational Exellence Techniques (Doctoral dissertation). Hasselt University.
}
\seealso{
\code{vignette("filters", "edeaR")}

Other filters: 
\code{\link{filter_activity_frequency}()},
\code{\link{filter_activity_instance}()},
\code{\link{filter_activity_presence}()},
\code{\link{filter_case_condition}()},
\code{\link{filter_case}()},
\code{\link{filter_endpoints}()}
}
